package goldga

import (
	"bufio"
	"fmt"
	"io"
	"sort"

	"github.com/BurntSushi/toml"
)

type snapshotMap map[string]string

type goldenFile struct {
	Snapshots snapshotMap `toml:"snapshots"`
}

func newGoldenFile() *goldenFile {
	return &goldenFile{
		Snapshots: snapshotMap{},
	}
}

func (g *goldenFile) sortSnapshotKeys() []string {
	keys := make([]string, 0, len(g.Snapshots))

	for k := range g.Snapshots {
		keys = append(keys, k)
	}

	sort.Strings(keys)

	return keys
}

func readGoldenFile(r io.Reader) (*goldenFile, error) {
	file := newGoldenFile()

	if _, err := toml.DecodeReader(r, &file); err != nil {
		return nil, err
	}

	return file, nil
}

func writeGoldenFile(w io.Writer, file *goldenFile) error {
	bw := bufio.NewWriter(w)
	lines := []string{
		"# Generated by goldga. DO NOT EDIT.",
		"[snapshots]",
	}

	// Print header
	for _, line := range lines {
		if _, err := fmt.Fprintln(bw, line); err != nil {
			return err
		}
	}

	// Print snapshots
	for _, k := range file.sortSnapshotKeys() {
		v := file.Snapshots[k]

		if _, err := fmt.Fprintf(bw, "%q = '''\n%s'''\n", k, v); err != nil {
			return err
		}
	}

	return bw.Flush()
}
